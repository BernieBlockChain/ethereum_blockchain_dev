
inside the chain data directory provided there will be folders created including keystore which contains your account data. If you lose this you lose your account. But you may back it up.

(note: on Windows operating systems you will likely have to omit the ./ before geth)

inside geth/chaindata/ the actual blockchain blocks are stored 
$ ./geth --datadir "/Users/teaching/Documents/blockchain_course/chaindata"


creating an account
$ ./geth account new
Your new account is locked with a password. Please give a password. Do not forget this password.
Passphrase:
Repeat Passphrase:
Address: {168bc315a2ee09042d83d7c5811b533620531f67}

Listing accounts from the terminal
$ ./geth account list
Account #0: {a94f5374fce5edbc8e2a8697c15331677e6ebf0b}
Account #1: {c385233b188811c9f355d4caec14df86d6248235}
Account #2: {7f444580bfef4b9bc7e14eb7fb2a029336b07c9d}

Example genesis block description file,
genesis.json:

{
    "config": {
        "chainId": 20171027,
        "homesteadBlock": 0,
        "eip155Block": 0,
        "eip158Block": 0
    },
    "difficulty": "0x800000",
    "gasLimit": "67000000",
    "alloc": {
            "cde1c26647fb3c28e1850ce5213a8d594c257751": { "balance": "123456" }
    }
}

To create a database that uses this genesis block, run the following command. This will import and set the canonical genesis block for your chain.
$ ./geth --datadir path/to/custom/data/folder init genesis.json

Running without this command and providing your own genesis.json file will use the default Ethereum Main network genesis block.

Future runs of geth on this data directory will use the genesis block you have defined.
$ ./geth --datadir path/to/custom/data/folder --networkid 20171027

Geth has a built in javascript console that we will explore to a varying degree.

$ ./geth --datadir "/Users/teaching/Documents/blockchain_course/chaindata" --networkid 20171027 console

inside Geth JS console:
Within the console “eth" is an object that allows us to access network properties

to list accounts:
> eth.accounts

create an account:
> personal.newAccount()

To check your the etherbase account balance:
> web3.fromWei(eth.getBalance(eth.coinbase), "ether")


On the console you can also unlock accounts (one at a time):
> personal.unlockAccount(address, "password”, duration)
you may omit duration for the default
you may omit password to be prompted (probably safer)

Get info on your node:
> admin.nodeInfo.enode
more info:
> admin.nodeInfo

Start Mining
> miner.start()

see what is happening more or less
> debug.verbosity(x)

Geth also includes some basic cryptographic tools, example to find the hash of some data
> web3.sha3("my data")

For more see:
https://github.com/ethereum/wiki/wiki/JavaScript-API
> web3.toAscii(hexEncodedString)
> web3.toHex(asciiEncodedString)

get information about the latest block
> web3.eth.getBlock("pending")
see the difficulty of the block
> web3.eth.getBlock("pending").difficulty

notice that the difficulty will adjust over time to target ~15s block times

manually add a peer - otherwise discovering peers can take a very long time
> admin.addPeer("enode://81ed3e4401cffc31c81b3d133e184da273e21a0eb37c7e78d39ee2a1c24b033cb1ed739a65540aba5dd749f22dc1d148f8e9b35ff0bf717d70e45ec49e19778c@130.63.216.138:30303")
notice the IP address after the @ and before :30303 (the port) - change this to the IP of any working computer

Sending transactions:
> eth.sendTransaction({from: eth.accounts[0], to: "0x17699841619146d6f4bf5e1e5b0ec73c55ded822", value: 5000000000, data: "0x52656d656d626572207468652044414f"})

what you will get back is a transaction id for example:
"0xfb63ad6666b3b1be941db6c621d19846cfa9617d268592995a8b46a423c36665"

you can check the status of this transaction with
> eth.getTransaction("0xfb63ad6666b3b1be941db6c621d19846cfa9617d268592995a8b46a423c36665")

The Geth Javascript console can accept any javascript. For example the following can be used to find transactions to a particular account

get/parse/display all transactions to an account
getTransactionsByAccount.js:
*********************Start of Javascript on next line!****************************

function getTransactionsByAccount(myaccount, startBlockNumber, endBlockNumber) {
  if (endBlockNumber == null) {
    endBlockNumber = eth.blockNumber;
    console.log("Using endBlockNumber: " + endBlockNumber);
  }
  if (startBlockNumber == null) {
    startBlockNumber = endBlockNumber - 1000;
    console.log("Using startBlockNumber: " + startBlockNumber);
  }
  console.log("Searching for transactions to/from account \"" + myaccount + "\" within blocks "  + startBlockNumber + " and " + endBlockNumber);
  for (var i = startBlockNumber; i <= endBlockNumber; i++) {
    if (i % 1000 == 0) {
      console.log("Searching block " + i);
    }
    var block = eth.getBlock(i, true);
    if (block != null && block.transactions != null) {
      block.transactions.forEach( function(e) {
        if (myaccount == "*" || myaccount == e.from || myaccount == e.to) {
          console.log("  tx hash          : " + e.hash + "\n"
            + "   nonce           : " + e.nonce + "\n"
            + "   blockHash       : " + e.blockHash + "\n"
            + "   blockNumber     : " + e.blockNumber + "\n"
            + "   transactionIndex: " + e.transactionIndex + "\n"
            + "   from            : " + e.from + "\n" 
            + "   to              : " + e.to + "\n"
            + "   value           : " + e.value + "\n"
            + "   time            : " + block.timestamp + " " + new Date(block.timestamp * 1000).toGMTString() + "\n"
            + "   gasPrice        : " + e.gasPrice + "\n"
            + "   gas             : " + e.gas + "\n"
            + "   input           : " + e.input);
        }
      })
    }
  }
}

*********************End of Javascript!****************************
Excercise for javascript wizards - use the above code to spider, crawl, and data-mine the network of transactions...

load the script from within the same directory with: 
> loadScript("getTransactionsByAccount.js")
> getTransactionsByAccount("0x17699841619146d6f4bf5e1e5b0ec73c55ded822", 0, eth.blockNumber) 

geth used to have a built in compiler but this was removed for security reasons.
you could install and run solidity command line compiler but it's inconvenient and not user friendly
there's a web-based IDE for solidity called remix https://remix.ethereum.org
don't worry everything runs in the browser!

Example Solidity Smart Contract DeadDrop.sol
*********************Solidty code starts below!****************************

pragma solidity ^0.4.18;

contract DeadDrop{
    string message;
    function DeadDrop (string data) public {
        message = data;
    }
    
    function getMessage() constant public returns (string)
    {
        return message;
    }
}

*********************Solidty code ends above!****************************

go to the compile tab in browser solidity and click on details
scroll down to find web3deploy - copy this into a text editor for any final changes...
ex.

*********************Web3 deployment code for the previous contract begins below!****************************

var data = /* var of type string here DO NOT FORGET*/ ;

var browser_deaddrop_sol_deaddropContract = web3.eth.contract([{"constant":true,"inputs":[],"name":"getMessage","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[{"name":"data","type":"string"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"}]);
var browser_deaddrop_sol_deaddrop = browser_deaddrop_sol_deaddropContract.new(
   data,
   {
     from: web3.eth.accounts[0], 
     data: '0x6060604052341561000f57600080fd5b6040516102b83803806102b8833981016040528080518201919050508060009080519060200190610041929190610048565b50506100ed565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061008957805160ff19168380011785556100b7565b828001600101855582156100b7579182015b828111156100b657825182559160200191906001019061009b565b5b5090506100c491906100c8565b5090565b6100ea91905b808211156100e65760008160009055506001016100ce565b5090565b90565b6101bc806100fc6000396000f300606060405260043610610041576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063ce6d41de14610046575b600080fd5b341561005157600080fd5b6100596100d4565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561009957808201518184015260208101905061007e565b50505050905090810190601f1680156100c65780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6100dc61017c565b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156101725780601f1061014757610100808354040283529160200191610172565b820191906000526020600020905b81548152906001019060200180831161015557829003601f168201915b5050505050905090565b6020604051908101604052806000815250905600a165627a7a7230582003c1060e51911b1598cab3adbd622a571ae4ad1f71b13ece6ce33714f119153b0029', 
     gas: '4700000'
   }, function (e, contract){
    console.log(e, contract);
    if (typeof contract.address !== 'undefined') {
         console.log('Contract mined! address: ' + contract.address + ' transactionHash: ' + contract.transactionHash);
    }
 })

*********************Web3 deployment code for the previous contract ends above!****************************

 make sure you have your account unlocked in geth

 then paste the above into geth console... making sure you ahve money for gas...

save the address that is returned...
> var contractAddress = "0x83adeeaba89c571c8d452a352101ec6d785a7825"
> var deployedBinary = eth.getCode(contractAddress)

check how much balance the contract has using eth.getBalance as before
if you share the ABI or Application Binary Interface with somebody else they know how to use your contract.
(ex. stored in the above under browser_deaddrop_sol_deaddropContract)

> var deadDrop = browser_deaddrop_sol_deaddropContract.at(contractAddress)I

can get data out of the contract. notice this does not generate a transaction because it is only querying the state of the contract.. ie. the function is constant
> deadDrop.getMessage.call()

functions including constructors that accept ether must be declared PAYABLE
let's upgrade our DeadDrop contract and redeploy...

*********************Solidty code starts below!****************************


pragma solidity ^0.4.18;

contract DeadDrop{
    string message;
    uint bounty = 100;
    function DeadDrop (string data) public {
        message = data;
    }
    
    function getMessage() constant public returns (string)
    {
        return message;
    }
    
    function changeMessage(string newMessage) public payable returns (bool)
    {
        if (msg.value > bounty){
            message = newMessage;
            return true;
        }else{
            return false;
        }
        
        
    }
}

*********************Solidty code ends above!****************************


call the changeMessage function - pass arguments in the order they appear in the function, with appropriate types
the last arguments are optional as far as the function is concerned
but sendTransaction as the name suggests will initiate a transaction and this requires gas
note this transaction also sends 1000 wei
> deadDrop.changeMessage.sendTransaction("This is my new message", {from: eth.coinbase, gas: 3000000, value: 1000}, 
  function (error, result){
    if(!error){
      console.log(result)
    } else {
      console.log(error)
    }
  });

there will be a transaction receipt displayed. It would be a good idea to save this for later
var tx = "0xf7ee9e196b8a0ee803748e09373a46bfe962342390f1118c652ea566453e7267"

>  receipt = web3.eth.getTransactionReceipt(tx)
